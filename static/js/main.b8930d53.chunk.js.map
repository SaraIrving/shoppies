{"version":3,"sources":["logo.svg","components/SearchBox.jsx","images/grumpyCat.png","components/Alert.jsx","components/Header.jsx","components/Footer.jsx","components/Button.jsx","images/cryingCat.png","images/yelling.png","images/drakeNo.png","images/drakeYes.png","images/successKid.png","components/Movie.jsx","components/ResultsList.jsx","components/NominationsList.jsx","App.js","hooks/useAppData.js","reportWebVitals.js","index.js"],"names":["SearchBox","props","submitHandler","event","preventDefault","console","log","state","enteredValue","setState","prev","searchValue","className","onSubmit","name","placeholder","type","onChange","target","value","onKeyPress","keyCode","Alert","enableDragDrop","src","grumpyCat","onClick","buttonLabel","Movie","memeArray","drakeYes","successKid","cat","madLady","drakeNo","source","disable","movie","title","year","Button","draggableId","index","provided","draggableProps","dragHandleProps","ref","innerRef","listItemType","getResultsSubmitHandler","nominationsArray","resultsArray","map","movieObj","Title","Year","imdbID","disableProp","nomArray","length","determineButtonDisable","NominationsList","getNomSubmitHandler","key","nomCopy","slice","each","splice","droppableId","id","droppableProps","App","useState","useEffect","axios","get","then","response","data","Search","results","catch","error","useAppData","Header","checked","readOnly","for","ResultsList","onDragEnd","result","destination","items","Array","from","reorderedItem","Footer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8930d53.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\n\n\nexport default function SearchBox(props) {\n\n  const changeHandler = (event) => {\n    console.log(\"In change handler, event = \", event.target.value)\n    props.setState(prev => ({...prev, enteredValue: event.target.value}))\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    // trigger api call now with final product that is pulled out of state?\n    // alternately, now update a \"final value\" in the state which will trigger the api call so that the api is not firing for each change in character as the user types in the word\n    console.log(\"IN submission handler\")\n    console.log(props.state.enteredValue)\n    props.setState(prev => ({...prev, searchValue: props.state.enteredValue}))\n\n  };\n\n  const handleKeyPress = (event) => {\n     //it triggers by pressing the enter key\n     if (event.keyCode === 13) {\n      submitHandler();\n    }\n  };\n\n  return (\n\n    <div className=\"searchBox\">\n      <form onSubmit={submitHandler}>\n        <label></label>\n        <input name=\"searchBox\" placeholder=\"Movie to search...\" type=\"text\" onChange={changeHandler} onKeyPress={handleKeyPress}></input>\n      </form>\n    </div>\n  )\n\n}","export default __webpack_public_path__ + \"static/media/grumpyCat.5fe918b2.png\";","import React from 'react';\nimport Bounce from 'react-reveal/Bounce';\nimport grumpyCat from '../images/grumpyCat.png'\n\n\nexport default function Alert (props) {\n\n  return(\n    <Bounce>\n      <div className=\"alert\">\n        {props.state.enableDragDrop && <img src={grumpyCat} className=\"memeImg\"/>}\n        <p>\n          Nominations list is full! <br></br> Remove the duds if you want to nominate some more\n        </p>\n        {props.state.enableDragDrop && <img src={grumpyCat} className=\"memeImg\"/>}\n      </div>\n      \n    </Bounce>\n\n\n\n  );\n}","import React from 'react'\nimport Flash from 'react-reveal/Flash';\n\nexport default function (props) {\n\n  console.log(\"Props in header = \", props);\n  return (\n    <header>\n      <Flash><h2 className=\"title\">The Shoppie Awards</h2></Flash>\n      {props.state.enableDragDrop &&  <p>Search for your fav movies. Judge them with some help from your fav memes!</p>}\n      {!props.state.enableDragDrop &&  <p>Search for your fav movies. Judge them with only with buttons and not pop culture references!</p>}\n     \n    </header>\n  )\n\n\n}","import React from 'react';\n\nexport default function () {\n\n  return (\n    <footer>\n      <p>\"The Shoppie Awards have been a really healthy outlet for my judgemental tendencies\" - Karen, Shoppie judge since 2021</p>\n    </footer>\n  );\n}","import React from 'react';\n\nexport default function (props) {\n\n\n  return (\n    <button className={props.className} onClick={props.onClick}>{props.buttonLabel}</button>\n  );\n}","export default __webpack_public_path__ + \"static/media/cryingCat.f07f41a3.png\";","export default __webpack_public_path__ + \"static/media/yelling.b8a1837c.png\";","export default __webpack_public_path__ + \"static/media/drakeNo.2b820dc3.png\";","export default __webpack_public_path__ + \"static/media/drakeYes.b93d5b00.png\";","export default __webpack_public_path__ + \"static/media/successKid.ad052a3e.png\";","import React from 'react';\nimport Button from './Button';\nimport { Draggable } from \"react-beautiful-dnd\";\nimport cat from '../images/cryingCat.png';\nimport madLady from '../images/yelling.png';\nimport drakeNo from '../images/drakeNo.png';\nimport drakeYes from '../images/drakeYes.png';\nimport successKid from '../images/successKid.png';\n\nexport default function Movie(props) {\n\n  // expected structure of object in results array:\n  // { Poster: \"https://m.media-amazon.com/images/M/MV5BMjExNzkxOTYyNl5BMl5BanBnXkFtZTcwODA0MjU4Ng@@._V1_SX300.jpg\"\n  // Title: \"War Horse\"\n  // Type: \"movie\"\n  // Year: \"2011\"\n  // imdbID: \"tt1568911\"}\n\n  const determineImage = function(index) {\n    if(index === 0) {\n      return \n    }\n  }\n\n  const memeArray = [[drakeYes, \"First! That hotline will be blinging!\"], [successKid, \"Second! We're almost the best!\"], [cat, \"Third! Not bad, but some mixed feelings.\"], [madLady, \"Fourth!?! I'd like to speak to the manager!\"], [drakeNo, \"Fifth! Pshssh!\"]];\n\n  console.log(\"MOVIE PROPS = \", props);\n\n\n  return (\n    <div>\n       {(props.state.enableDragDrop && props.source === \"results\") && <div>\n                                        {props.disable === true &&  <div className=\"movieWrapper\">\n                                                                      <div className=\"movieInfoWrapper\">\n                                                                        <p>{props.movie.title} ({props.movie.year})</p>\n                                                                      </div>\n                                                                        </div>}\n                                        {props.disable === false && <div className=\"movieWrapper\">\n                                                                      <div className=\"movieInfoWrapper\">\n                                                                        <p>{props.movie.title} ({props.movie.year})</p>\n                                                                        <form onSubmit={props.submitHandler}>\n                                                                          <Button buttonLabel={props.buttonLabel} className={props.className}></Button>\n                                                                        </form>\n                                                                      </div>\n                                                                    </div>}\n                                        </div>}\n\n      {(props.state.enableDragDrop && !props.source) &&  <Draggable key={props.draggableId} draggableId={props.draggableId} index={props.index}>\n        {(provided) => (\n          <div {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}>\n          {props.disable === true &&  <div className=\"movieWrapper\">\n                                        <div className=\"movieInfoWrapper\"> \n                                          <p>{props.movie.title} ({props.movie.year})</p>\n                                        </div>\n                                          </div>}\n          {(props.disable === false && props.listItemType === \"nominations\") && <div className=\"movieWrapper\">\n                                        <div className=\"memeWrapper\">\n                                          <img src={memeArray[props.index][0]} className=\"memeImg\"/>\n                                          <p>{memeArray[props.index][1]}</p> \n                                        </div>\n                                        <div className=\"movieInfoWrapper\">\n                                          <p>{props.movie.title} ({props.movie.year})</p>\n                                          <form onSubmit={props.submitHandler}>\n                                            <Button buttonLabel={props.buttonLabel} className={props.className}></Button>\n                                          </form>\n                                        </div>\n                                      \n                                      </div>}\n          {(props.disable === false && props.listItemType === \"results\") && <div className=\"movieWrapper\">\n          <div className=\"movieInfoWrapper\">\n            <p>{props.movie.title} ({props.movie.year})</p>\n            <form onSubmit={props.submitHandler}>\n              <Button buttonLabel={props.buttonLabel} className={props.className}></Button>\n            </form>\n          </div>\n          </div>}\n      </div>\n        )}\n                                        \n                                      </Draggable>}\n\n      {!props.state.enableDragDrop && <div>\n                                        {props.disable === true &&  <div className=\"movieWrapper\">\n                                                                      <div className=\"movieInfoWrapper\">\n                                                                        <p>{props.movie.title} ({props.movie.year})</p>\n                                                                      </div>\n                                                                        </div>}\n                                        {props.disable === false && <div className=\"movieWrapper\">\n                                                                      <div className=\"movieInfoWrapper\">\n                                                                        <p>{props.movie.title} ({props.movie.year})</p>\n                                                                        <form onSubmit={props.submitHandler}>\n                                                                          <Button buttonLabel={props.buttonLabel} className={props.className}></Button>\n                                                                        </form>\n                                                                      </div>\n                                                                    </div>}\n                                        </div>}\n \n    </div>\n \n  );\n\n}","import React from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport Movie from './Movie';\n\nexport default function(props) {\n\n  // // submission handler for the form in the Movie component\n\n  const getResultsSubmitHandler = function(movie) {\n    return ((event) => {\n      event.preventDefault();\n     \n      //Add the movie in question to the nominationsArray in state\n      props.setState(prev => ({...prev, nominationsArray: [...prev.nominationsArray, movie]}))\n    });\n  }\n\n\n  // if a result is already in the nominations list, don't give it a Nominate button\n  const determineButtonDisable = function(nomArray, movieObj) {\n    if(nomArray.length >= 5) {\n      return true;\n    }\n\n    for (let nom of nomArray) {\n      if (nom.imdbID === movieObj.imdbID){\n        return true;\n      } \n    }\n    return false;\n  };\n\n\n  return (\n    <div className=\"resultsList\">\n      <h2>Search Results</h2>\n      <p className=\"resultsInstructions\">Click \"Nominate\" to add a movie to the list of contenders for a Shoppie Award!</p>\n      {props.state.resultsArray !== 0 && <div>\n      {props.state.resultsArray.map((movie, index) => {\n        const movieObj = {\n                        title: movie.Title,\n                        year: movie.Year,\n                        imdbID: movie.imdbID\n                        };\n\n        const disableProp = determineButtonDisable(props.state.nominationsArray, movieObj);\n\n        return(\n          <Movie source=\"results\" disable={disableProp} movie={movieObj} key={index} state={props.state} setState={props.setState} buttonLabel=\"Nominate\" submitHandler={getResultsSubmitHandler(movieObj)} className=\"resultButton\"></Movie>\n        );\n      })}\n    </div>}\n\n\n    {/* {(props.state.resultsArray !== 0 && props.state.enableDragDrop) && <Droppable droppableId={props.droppableId}>\n      {(provided) => (\n        <div {...provided.droppableProps} ref={provided.innerRef}>\n        {props.state.resultsArray.map((movie, index) => {\n          const movieObj = {\n                          title: movie.Title,\n                          year: movie.Year,\n                          imdbID: movie.imdbID\n                          };\n  \n          const disableProp = determineButtonDisable(props.state.nominationsArray, movieObj);\n  \n          return(\n            <Movie index={index} listItemType={props.listItemType} draggableId={movieObj.title + props.listItemType} disable={disableProp} movie={movieObj} key={index} state={props.state} setState={props.setState} buttonLabel=\"Nominate\" submitHandler={getResultsSubmitHandler(movieObj)} className=\"resultButton\"></Movie>\n          );\n        })}\n        {provided.placeholder}\n      </div>\n\n      )}\n      \n      </Droppable>} */}\n\n    </div> \n    \n  \n  );\n\n}","import React from 'react';\nimport Movie from './Movie';\nimport { Droppable } from \"react-beautiful-dnd\";\n\nexport default function NominationsList(props) {\n\n  // submission handler for the form in the Movie component\n\n  const getNomSubmitHandler = function(key){\n    return ((event) => {\n        event.preventDefault();\n        // remove the movie in question from the nominations array\n        \n        props.setState(prev => {\n          \n          const nomCopy = prev.nominationsArray.slice(0)\n          nomCopy.map(each => console.log(\"before-\", each.title))\n          console.log(\"NOM COPY BEFORE = \", nomCopy.length);\n          nomCopy.splice(key, 1);\n          console.log(\"NOM COPY AFTER = \", nomCopy.length);\n          nomCopy.map(each => console.log(\"after -\", each.title))\n          return(\n            {...prev, nominationsArray: nomCopy}\n          )\n        })\n      }\n    )\n  }\n\n  return (\n    <div className=\"nominationsList\">\n      <h2>Shoppie Award Nominees</h2>\n        {props.state.enableDragDrop && <p className=\"nomsInstructions\">Drag and drop the nominees to reorder their ranking. Click \"Remove\" to bump them out of the running!</p>}\n        {!props.state.enableDragDrop && <p className=\"nomsInstructions\">Click \"Remove\" to bump a nominee out of the running!</p>}\n        {(props.state.nominationsArray.length !== 0 && props.state.enableDragDrop) && <Droppable droppableId={props.droppableId} id=\"nomListDnd\">\n        {(provided) => (\n          <div  {...provided.droppableProps} ref={provided.innerRef}>\n            {console.log(\"State in NOM LIST = \", props.state.nominationsArray)}\n          {props.state.nominationsArray.map((movie, index) => {\n            return (\n              <Movie listItemType={props.listItemType} draggableId={movie.title + props.listItemType} index={index} disable={false} movie={movie} key={index} state={props.state} setState={props.setState} buttonLabel=\"Remove\" submitHandler={getNomSubmitHandler(index)} className=\"nomButton\"></Movie>\n            );\n          })}\n          {provided.placeholder}\n        </div>\n\n        )}\n        </Droppable>}\n        {(props.state.nominationsArray.length !== 0 && !props.state.enableDragDrop) && <div>\n          {props.state.nominationsArray.map((movie, index) => {\n            return (\n              <Movie disable={false} movie={movie} key={index} state={props.state} setState={props.setState} buttonLabel=\"Remove\" submitHandler={getNomSubmitHandler(index)} className=\"nomButton\"></Movie>\n            );\n          })}\n        </div>}\n\n    </div>\n  );\n}","import logo from './logo.svg';\nimport './App.css';\nimport SearchBox from './components/SearchBox';\nimport Alert from './components/Alert';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport useAppData from './hooks/useAppData';\nimport ResultsList from './components/ResultsList';\nimport NominationsList from './components/NominationsList';\nimport Bounce from 'react-reveal/Bounce';\nimport Flash from 'react-reveal/Flash';\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nfunction App() {\n\n  const { state, setState } = useAppData();\n\n  console.log(\"state = \", state);\n\n  const handleOnDragEnd = function(result) {\n\n    console.log(\"RESULT DRAG END  = \", result);\n\n    //if you try to drag an element outside of the DragDropContext\n    if(!result.destination) {\n      console.log(\"Cant drop here!\")\n      return;\n    }\n\n    if (result.destination.droppableId === \"nominations\" && result.source.droppableId === \"nominations\") {\n      const items = Array.from(state.nominationsArray.slice(0));\n      const [reorderedItem] = items.splice(result.source.index, 1);\n      items.splice(result.destination.index, 0, reorderedItem);\n      setState(prev => {return {...prev, nominationsArray: items}})\n    }\n\n    // // if you are drag and dropping within the results list\n    // if (result.destination.droppableId === \"results\" && result.source.droppableId === \"results\") {\n    //   // const items = Array.from(state.resultsArray);\n    //   const items = state.resultsArray.slice(0);\n    //   const [reorderedItem] = items.splice(result.source.index, 1);\n    //   items.splice(result.destination.index, 0, reorderedItem);\n    //   setState(prev => {return {...prev, resultsArray: items}})\n\n    // // if you are drag and dropping within the nominations list\n    // } else if (result.destination.droppableId === \"nominations\" && result.source.droppableId === \"nominations\") {\n    //   const items = Array.from(state.nominationsArray.slice(0));\n    //   const [reorderedItem] = items.splice(result.source.index, 1);\n    //   items.splice(result.destination.index, 0, reorderedItem);\n    //   setState(prev => {return {...prev, nominationsArray: items}})\n\n    // // if you are drag and dropping from results to nominations\n    // } else if (result.destination.droppableId !== result.source.droppableId) {\n    //   console.log(\"you're switching LISTS!!\")\n    //   console.log(\"source - \", result.source.droppableId)\n    //   console.log(\"destination - \", result.destination.droppableId)\n    //   if (result.destination.droppableId === \"nominations\") {\n    //     console.log(\"putting it in NOMS\")\n    //     // const items = Array.from(state.nominationsArray);\n    //     // destination has a droppableID and an index\n    //     // source has a droppableId and an index \n    //     // leverage these to update state\n    //       // cut the dragged movie out of results state and add to nom state\n\n    //     // crate a copy of nom state array  \n    //     const items = state.nominationsArray.slice(0);\n\n    //     // pull out moved item from results state \n    //     const [reorderedItem] = state.resultsArray.splice(result.source.index, 1);\n\n    //     // put moved item into copy of nom state array\n    //     items.splice(result.destination.index, 0, reorderedItem)\n    //     console.log(\"UPDATED noms = \", items);\n\n    //     // now make a copy of the results state before the removed item\n    //     const newResutls1 = state.resultsArray.slice(0, result.source.index);\n    //     console.log(\"Newresults1 = \", newResutls1)\n    //     const newResutls2 = state.resultsArray.slice(result.source.index);\n    //     console.log(\"newResults2 = \", newResutls2);\n    //     const updatedResults =newResutls1.concat(newResutls2);\n    //     console.log(\"updatedResults = \", updatedResults)\n\n\n    //     // update both nom and results state \n    //     setState(prev => {return {...prev, nominationsArray: items, resultsArray: updatedResults}})\n\n\n    //   } else if (result.destination.droppableId === \"results\") {\n    //     console.log(\"Youre putting it in RESULTS\")\n    //   }\n    // }\n\n  };\n\n  return (\n    <div className=\"App\">\n      <Header state={state}></Header>\n      <div className=\"appBody\">\n        <SearchBox state={state} setState={setState}></SearchBox>\n        <div className=\"radioWrapper\">\n          <input id=\"dndRadio\" type=\"radio\" value=\"DNDRadio\" checked={!state.enableDragDrop} readOnly={true} onClick={event => setState(prev => ({...prev, enableDragDrop: !prev.enableDragDrop}))}></input>\n          <label for=\"dndRadio\">\n            <span className=\"radioSpan\">Enable \"meme free\" mode for a boring by the specifications app</span>\n          </label>\n        </div>\n        {state.nominationsArray.length >= 5 && <Alert state={state}></Alert>}\n\n\n        {!state.enableDragDrop && <div className=\"resultNomWrapper\">\n                                      <ResultsList state={state} setState={setState}></ResultsList>\n                                    \n                                      <NominationsList state={state} setState={setState}></NominationsList>\n                                  \n                                  </div>}\n        {state.enableDragDrop && <DragDropContext onDragEnd={handleOnDragEnd}>\n                                    <div className=\"resultNomWrapper\">\n                                    \n                                      <ResultsList state={state} setState={setState} droppableId=\"results\" listItemType=\"results\"></ResultsList>\n                \n                                      <NominationsList state={state} setState={setState} droppableId=\"nominations\" listItemType=\"nominations\"></NominationsList>\n                                    </div>\n                                  </DragDropContext>}\n    </div>\n    <Footer></Footer>\n    </div>\n   \n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n\nexport default function useAppData() {\n\n  const [state, setState] = useState({\n                                      enteredValue: 'initial',\n                                      searchValue: '',\n                                      resultsArray: [],\n                                      nominationsArray: [],\n                                      enableDragDrop: true\n                                    });\n\n  useEffect(() => {\n    axios.get(`http://www.omdbapi.com/?apikey=bb6449b7&type=movie&s=${state.searchValue}`)\n    .then((response) => {\n      console.log(\"response.data  = \", response.data.Search)\n      //now use the data to set the results list in the state!\n\n      //isolate the first 5 responses\n      const results = response.data.Search.slice(0, 5)\n      console.log(results)\n      setState(prev => ({...prev, resultsArray: results}));\n    })\n    .catch(error => console.log(error));\n\n  }, [state.searchValue])\n\n  return{\n    state,\n    setState\n  };\n\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}